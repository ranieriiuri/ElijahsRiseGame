@startuml

class Game {
    + run()
}

class Level {
    + load_and_scale()
    + run()
    + level_text()
    + draw_meat_bread_bar()
    + check_meat_bread_bar()
    + get_player()
}

class Entity {
    + load_frames()
    + get_sprite()
    + update_animation()
    + move()
    + render()
}

class Player extends Entity {
    + move()
    + collect_meat_bread()
    + take_damage()
    + render()
}

class Enemy extends Entity {
    + move()
    + render()
}

class Tree extends Entity {}
class Wind extends Entity {}
class Background extends Entity {}

class MeatBread extends Entity {
    + update()
    + collect()
    + move()
    + render()
}

class Score {
    + save()
    + show()
    - scoreText()
}

class TransitionManager {
    + fade_in()
    + fade_out()
}

class EntityMediator {
    + verify_collision_window()
    + verify_collision_entity()
    + verify_collision()
    + verify_health()
    + update_mb_server()
}

class VideoManager {
    + play_video()
    + stop_video()
    + playIntro()
    + playEnding()
}

class EntityFactory {
    + get_entity(Entity)
}

class DBProxy {
    + save()
    + retrieve_top10()
    + close()
}

class EntityBehavior {
    + jump()
    + update_jump()
}

' === Relações ===

Game --> Level : usa
Game --> VideoManager : usa
Game --> TransitionManager : usa

Level --> Player : possui
Level --> EntityFactory : instancia entidades
Level --> EntityMediator : usa
Level --> Score : usa
Level --> MeatBread : possui
Level --> Tree : possui
Level --> Enemy : possui
Level --> Wind : possui
Level --> Background : possui

EntityFactory --> Entity : fabrica

EntityMediator --> Background
EntityMediator --> Player
EntityMediator --> Enemy
EntityMediator --> MeatBread
EntityMediator --> Tree
EntityMediator --> Wind

Enemy --> EntityBehavior : composição

Score --> DBProxy : usa

@enduml
